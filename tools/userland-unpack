#!/usr/bin/python3.9
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
#

#
# userland-unpack - an archive unpack utility
#
# A simple program to uncompress and unpack source archive files into a target
# directory and fix permissions if requested.
#

import argparse
import os
import stat
import sys
import tempfile

from typing import Tuple

# By default the verbose mode is off and thus verbose does nothing
verbose = lambda *a, **k: None


def uncompress_unpack_commands(filename: str) -> Tuple[str, str]:
    """Get shell commands to uncompress and unpack given archive.

    Several archives are supported with following results:

      .bz2 | .tbz | .tbz2  -> /usr/bin/bzip2 -dc IN       | gtar -xf -
      .tgz | .gz           -> /usr/bin/gzip -dc IN        | gtar -xf -
      .Z                   -> /usr/bin/uncompress -c IN   | gtar -xf -
      .7z                  -> /usr/bin/7z --s IN          | gtar -xf -
      .xz                  -> /usr/bin/xz -dc IN          | gtar -xf -
      .jar                 -> /bin/cat IN                 | jar xf -
      .zip                 -> /usr/bin/unzip -qo IN
      .gem                 -> /usr/ruby/RUBYVER/bin/gem unpack IN
    """

    uncompress = "/bin/cat"
    unpack = " | gtar -xf -"

    if filename.endswith((".bz2", ".tbz", ".tbz2")):
        uncompress = "/usr/bin/bzip2 -dc"
    elif filename.endswith((".gz", ".tgz")):
        uncompress = "/usr/bin/gzip -dc"
    elif filename.endswith(".Z"):
        uncompress = "/usr/bin/uncompress -c"
    elif filename.endswith(".7z"):
        uncompress = "/usr/bin/7z --s"
    elif filename.endswith(".xz"):
        uncompress = "/usr/bin/xz -dc"
    elif filename.endswith(".zip"):
        uncompress = "/usr/bin/unzip -qo"
    elif filename.endswith(".gem"):
        ruby_ver = os.getenv("RUBY_VERSION", "")
        uncompress = f"/usr/ruby/{ruby_ver}/bin/gem unpack"

    if filename.endswith((".zip", ".gem")):
        unpack = ""
    elif filename.endswith((".jar")):
        unpack = " | jar xf -"

    verbose(f"command: {uncompress} {filename} {unpack}")

    return uncompress, unpack


def fixup_permissions(directory: str) -> None:
    """Recurse down a directory tree opening permissions so that others may
    access files in the tree.
    """

    for entry in os.listdir(directory):
        path = f"{directory}/{entry}"

        st = os.lstat(path)
        mode = stat.S_IMODE(st.st_mode)
        mode |= (stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
        if stat.S_ISDIR(st.st_mode):
            mode |= (stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)

        if stat.S_IMODE(st.st_mode) != mode:
            verbose(f"Changing {path} from {stat.S_IMODE(st.st_mode):4o} to {mode:4o}")
            os.chmod(path, mode)

        if stat.S_ISDIR(st.st_mode):
            fixup_permissions(path)


def main():
    parser = argparse.ArgumentParser(
        description="Uncompress and unpack source archives.")
    parser.add_argument('-v', '--verbose', action='store_true',
        help="Make program more verbose.")
    parser.add_argument('-f', '--fix-permissions', action='store_true',
        help="Open permissions so that others may access unpacked files.")
    parser.add_argument('-r', '--relocate-to',
        help="Where should unpacked files be relocated.")
    parser.add_argument('file')

    args = parser.parse_args()

    if args.verbose:
        global verbose
        verbose = print

    filename = args.file if args.file.startswith("/") else f"../{args.file}"
    uncompress, unpack = uncompress_unpack_commands(filename)
    tempdir = tempfile.mkdtemp(dir='.')

    # extract the archive contents
    verbose(f"cd {tempdir}; {uncompress} {filename}{unpack}")
    os.system(f"cd {tempdir}; {uncompress} {filename}{unpack}")

    # open up the permissions on what we extracted
    if args.fix_permissions:
        fixup_permissions(tempdir)

    if args.relocate_to is None:
        # move everything in the tempdir here
        for entry in os.listdir(tempdir):
            path = f"{tempdir}/{entry}"
            os.renames(path, entry)
    else:
        # rename the tempdir and open it's permissions
        os.renames(tempdir, args.relocate_to)
        os.chmod(args.relocate_to, 0o0755)


if __name__ == "__main__":
    main()
